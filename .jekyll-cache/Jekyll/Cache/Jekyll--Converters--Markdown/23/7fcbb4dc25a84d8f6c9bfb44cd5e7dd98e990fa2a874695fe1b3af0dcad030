I"<p><code class="language-plaintext highlighter-rouge">@Conditonal</code> 형제들의 설명은 다음과 같다.</p>

<table>
  <tbody>
    <tr>
      <td>Indicates that a component is only eligible for registration when all specified conditions match.</td>
    </tr>
  </tbody>
</table>

<p>그 중에서 <code class="language-plaintext highlighter-rouge">@ConditionalOnBean</code> 은 <code class="language-plaintext highlighter-rouge">that only matches when beans meeting all the specified requirements are already contained in the BeanFactory.</code> 이라고 적혀있고.. 대충 인자로 들어있는 클래스의 빈이 빈팩토리에 존재한다면 컴포넌트가 생긴다는 말이다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">ApplicationConfiguration</span><span class="p">{</span>
    <span class="nd">@Bean</span>
    <span class="nd">@ConditionalOnBean</span><span class="p">(</span><span class="nc">TestProperty</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">someConfig</span><span class="p">(</span><span class="n">testProperty</span><span class="p">:</span> <span class="nc">TestProperty</span><span class="p">):</span> <span class="nc">SomeConfig</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nc">SomeConfig</span><span class="p">(</span><span class="n">testProperty</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이 코드에서 <code class="language-plaintext highlighter-rouge">TestProperty</code> 타입의 빈이 있을 경우에 해당 빈을 주입받아 <code class="language-plaintext highlighter-rouge">SomeConfig</code> 빈을 만들고, <code class="language-plaintext highlighter-rouge">TestProperty</code> 빈이 없으면 <code class="language-plaintext highlighter-rouge">SomeConfig</code> 빈을 만들지 않도록 하는 코드인데, 이건 의도한 대로 동작하지 않을 수 있다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">ApplicationConfiguration</span><span class="p">:</span> <span class="nc">ApplicationContextAware</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">applicationContext</span><span class="p">:</span> <span class="nc">ApplicationContext</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">logger</span> <span class="p">=</span> <span class="nc">Logger</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="nc">ApplicationConfiguration</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">simpleName</span><span class="p">)</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">setApplicationContext</span><span class="p">(</span><span class="n">applicationContext</span><span class="p">:</span> <span class="nc">ApplicationContext</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">applicationContext</span> <span class="p">=</span> <span class="n">applicationContext</span>
    <span class="p">}</span>

    <span class="nd">@Bean</span>
    <span class="nd">@ConditionalOnMissingBean</span><span class="p">(</span><span class="nc">TestProperty</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">someConfig</span><span class="p">(</span><span class="n">testProperty</span><span class="p">:</span> <span class="nc">TestProperty</span><span class="p">):</span> <span class="nc">SomeConfig</span> <span class="p">{</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"testProperty has been injected! $testProperty"</span><span class="p">)</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"testProperty found in application context! ${applicationContext.getBean("</span><span class="n">testProperty</span><span class="s">")}"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">SomeConfig</span><span class="p">(</span><span class="n">testProperty</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// output</span>
<span class="c1">// testProperty has been injected! com.whojes.common.config.TestPropertyImpl@4aa3d36</span>
<span class="c1">// testProperty found in application context! com.whojes.common.config.TestPropertyImpl@4aa3d36</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code> 을 달아놨는데도 주입도 되고 applicationContext 에서 가져올 수도 있다. 엥?</p>

<p><strong>애초에 빈팩토리에 대한 이해도가 너무 낮아서… 하나씩 수정해보면서 <code class="language-plaintext highlighter-rouge">SomeConfig</code> 빈 생성이 되는지를 확인했다.</strong></p>

<hr />

<p><code class="language-plaintext highlighter-rouge">TestProperty</code> 빈을 어디서 만드는지에 따라 <code class="language-plaintext highlighter-rouge">@ConditionalOnMissingBean</code> 의 동작이 달라진다.</p>

:ET